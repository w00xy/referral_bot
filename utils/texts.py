from config import MIN_BALANCE_CRYPTO, FAKE_BIDS
from database.models import User, UserHistory, HelpMessage
from utils.extra import linkify, truncate_text


async def get_ref_reg_text():
    return (
        f"<b>üí∏ –í–∞—à –¥—Ä—É–≥ –æ—Ç–ø—Ä–∞–≤–∏–ª –≤–∞–º –Ω–µ—Å–∫–æ–ª—å–∫–æ USDT, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏—Ö –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã</b>"
    )


async def get_not_ref_reg_text():
    return (
        f"<b>üí∏ –í–∞—à –¥—Ä—É–≥ –æ—Ç–ø—Ä–∞–≤–∏–ª –≤–∞–º –Ω–µ—Å–∫–æ–ª—å–∫–æ USDT, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏—Ö –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã</b>"
    )

async def get_start_text(user_id, referrals_total,  balance):
    ref_link = await linkify(user_id)

    balance_rub = balance * 95

    return (
        f"<b>üéâ –î–µ–ª–∏—Å—å –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π</b>\n\n"
        f"<b>–ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–≥–∞ –∏ –∑–∞—Ä–∞–±–æ—Ç–∞–µ—Ç–µ –æ–±–∞ üí∞</b>\n"
        f"<b>–í—ã–≤–æ–¥ —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø—Ä–∏ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–∏ {MIN_BALANCE_CRYPTO} USDT</b>\n\n"
        f"<b>üë§ –¢–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b> <code>{ref_link}</code>\n\n"
        f"<b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: </b> <code>{referrals_total}</code>\n\n"
        f"<b>üëù –¢–≤–æ–π –±–∞–ª–∞–Ω—Å</b>: <code>{balance} USDT</code> (<code>{balance_rub:.1f}‚ÇΩ</code>)"
    )

async def get_subscribe_text():
    return (
        f"<b>üì¢ –ß—Ç–æ –±—ã –Ω–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞ –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã —Å–ø–æ–Ω—Å–æ—Ä–æ–≤</b>"
    )

choose_method_text = (
    f"<b>üí∏ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –≤—ã–≤–æ–¥–∞:</b>\n\n"
    )

async def selected_currency_text(cur: str, user: User):
    return (
        f"<b>–í—ã–±—Ä–∞–Ω–Ω–∞—è –≤–∞–ª—é—Ç–∞: <i>{cur}</i></b>\n\n"
        f"<b>–î–æ—Å—Ç—É–ø–Ω—ã–π –¥–ª—è –≤—ã–≤–æ–¥–∞ –±–∞–ª–∞–Ω—Å: <code>{user.balance} USDT</code></b>\n\n"
        f"<b>–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤—ã–≤–æ–¥–∞: </b>"
    )

async def get_address_text(cur, amount):
    return (
        f"<b>–í—ã–±—Ä–∞–Ω–Ω–∞—è –≤–∞–ª—é—Ç–∞: <i>{cur}</i></b>\n"
        f"<b>–°—É–º–º–∞ –≤—ã–≤–æ–¥–∞: <code>{amount} USDT</code></b>\n\n"
        f"<b>–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞: </b>"
    )

async def get_confirm_text(user: User, amount, cur, address):
    return (
        f"<b><i>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∑–∞—è–≤–∫–∏!</i></b>\n\n"
        f"<b>–í—ã–±—Ä–∞–Ω–Ω–∞—è –≤–∞–ª—é—Ç–∞: <i>{cur}</i></b>\n"
        f"<b>–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞: <code>{address}</code></b>\n"
        f"<b>–°—É–º–º–∞ –≤—ã–≤–æ–¥–∞: <code>{amount} USDT</code></b>\n"
    )

sent_bid_text = (
    f"<b>‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞</b>\n\n"
    f"<b><i>–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –≤ –∏—Å—Ç–æ—Ä–∏–∏ –≤—ã–≤–æ–¥–æ–≤</i></b>"
)

async def get_bid_text(bid: UserHistory):
    text = (
        f"<b>üìù –ó–∞—è–≤–∫–∞ –Ω–æ–º–µ—Ä {bid.id + FAKE_BIDS}</b>\n\n"
        f"<b>–°—É–º–º–∞: <code>{bid.amount}</code> USDT</b>\n"
        f"<b>–¢–æ–∫–µ–Ω: {bid.token}</b>\n"
        f"<b>–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞: <code>{bid.address}</code></b>\n"
        f"<b>–°—Ç–∞—Ç—É—Å: {bid.status}</b>\n"
        f"<b>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {bid.created}</b>"
    )
    return text

no_bids_text = f"<b>–ó–∞—è–≤–æ–∫ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ</b>"

async def no_bid_text(bid_id: int) -> str:
    return (
        f"<b>üìù –ó–∞—è–≤–∫–∞ {bid_id + FAKE_BIDS}</b>\n\n"
        f"<b><i>‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ!</i></b>"
    )

async def bid_text(bid_id: int) -> str:
    return (
        f"<b>üìù –ó–∞—è–≤–∫–∞ {bid_id + FAKE_BIDS}</b>\n\n"
        f"<b><i>‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞</i></b>"
    )

max_limit_bids_text = (
    f"‚ùóÔ∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥: 3\n\n"
    f"–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤–≤–µ–¥–µ–Ω–æ –≤ —Ü–µ–ª—è—Ö –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–æ–∫ —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏"
)

async def traffic_text():
    return (
        f"<b>üèÜ –¢–æ–ø —Ç—Ä–∞—Ñ—Ñ–µ—Ä–æ–≤</b>\n\n"
        f"<i>1. <b>youTIK - 2491 —Ä–µ—Ñ–µ—Ä–∞–ªüíé</b></i>\n"
        f"<i>2. <b>–ê–Ω–¥—Ä–µ–π - 1223 —Ä–µ—Ñ–µ—Ä–∞–ª–∞</b></i>\n"
        f"<i>3. <b>sng_pon4ik - 993 —Ä–µ—Ñ–µ—Ä–∞–ª–∞</b></i>\n"
    )

async def bids_text(bids, slide = 0):

    total_bids_on_page = 3  # –ù–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ 3 –∑–∞—è–≤–∫–∏

    if slide:
        start_bid = slide + total_bids_on_page - 1
    else:
        start_bid = 0

    end_bid = start_bid + total_bids_on_page

    text = (
        f"üìù<b> –ó–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥</b>\n"
    )

    for i in range(start_bid, end_bid):
        try:
            bid = bids[i]  # Access bid directly for better readability
        except:
            text += f"‚ùå –ö–æ–Ω–µ—Ü –∑–∞—è–≤–æ–∫"
            break
        # if bid["status"] == "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–∞":
        #     continue  # Skip rejected bids

        try:
            text += (
                f"ID –∑–∞—è–≤–∫–∏: {bid['id']} –¥–ª—è —é–∑–µ—Ä–∞ {bid['id'] + FAKE_BIDS}\n"
                f"–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∑–∞—è–≤–∫–∏: {bid['user_id']} | {'@' + bid['user'].username if bid['user'].username else '–ù–µ—Ç —é–∑–µ—Ä–Ω–µ–π–º–∞'}\n"
                f"–°—É–º–º–∞: {bid['amount']}\n"
                f"–¢–æ–∫–µ–Ω: {bid['token']}\n"
                f"–ê–¥—Ä–µ—Å: {bid['address']}\n"
                f"–°—Ç–∞—Ç—É—Å: {bid['status']}\n"
                f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {bid['created']}\n"  # Assuming 'created' exists in bid dictionary
                f"/open_bid_{bid['id']} - –æ—Ç–∫—Ä—ã—Ç—å –∑–∞—è–≤–∫—É\n\n"
            )
        except IndexError:
            text += f"‚ùå –ö–æ–Ω–µ—Ü –∑–∞—è–≤–æ–∫"
            break

    return text


async def get_detailed_bid_text(bid: UserHistory):
    return (
        f"üìù ID –∑–∞—è–≤–∫–∏: {bid.id} –¥–ª—è —é–∑–µ—Ä–∞ {bid.id + FAKE_BIDS}\n"
        f"–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∑–∞—è–≤–∫–∏: {bid.user_id} | {'@' + bid.user.username if bid.user.username else '–ù–µ—Ç —é–∑–µ—Ä–Ω–µ–π–º–∞'}\n"
        f"–°—É–º–º–∞: {bid.amount} USDT\n"
        f"–¢–æ–∫–µ–Ω: {bid.token}\n"
        f"–ê–¥—Ä–µ—Å: {bid.address}\n"
        f"–°—Ç–∞—Ç—É—Å: {bid.status}\n"
        f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {bid.created}\n"
    )


async def users_text(users: list[User], slide: int = 0) -> str:
    total_users_on_page = 20  # –ù–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ 20 —é–∑–µ—Ä–æ–≤–∞

    if slide:
        start = total_users_on_page + (total_users_on_page * (slide - 1))
    else:
        start = 0

    end = start + total_users_on_page

    total_users = len(users)
    total_bal = sum(user.balance or 0 for user in users) 
    
    text = (
        f"üë• <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–∞–ª–µ–π</b>\n"
        f"<b>–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:<i> {total_users}</i></b>\n"
        f"<b>–í –æ–±—â–µ–º –±–∞–∫—Å–æ–≤:<i> {total_bal} USDT</i></b>\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —á–∞—Ç user_id —á—Ç–æ –±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ\n\n"
    )

    for i in range(start, end):
        try:
            user = users[i]  # Access bid directly for better readability
        except:
            text += f"\n‚ùå –ö–æ–Ω–µ—Ü —é–∑–µ—Ä–æ–≤"
            break

        try:
            text += (
                f"{i + 1}. user_id: {user.user_id} | {'@' + user.username if user.username else '–Ω–µ—Ç —Å—Å—ã–ª–∫–∏'} | "
                f"–ë–∞–ª–∞–Ω—Å: {user.balance:.1f}\n"
            )
        except IndexError:
            text += f"\n‚ùå –ö–æ–Ω–µ—Ü –∑–∞—è–≤–æ–∫"
            break

    return text

async def get_check_text(check: str, bid: UserHistory):
    return (
        f"‚úçÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n{check}\n\n"
        f"ID –∑–∞—è–≤–∫–∏: {bid.id} –¥–ª—è —é–∑–µ—Ä–∞ {bid.id + FAKE_BIDS}\n"
        f"–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∑–∞—è–≤–∫–∏: {bid.user_id} | {'@' + bid.user.username if bid.user.username else '–ù–µ—Ç —é–∑–µ—Ä–Ω–µ–π–º–∞'}\n"
        f"–°—É–º–º–∞: {bid.amount}\n"
        f"–°—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è: ‚úÖ –£—Å–ø–µ—à–Ω–æ"
    )

async def detailed_info_user_text(user: User):
    text = (
        f"üë• –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–∞ –æ —é–∑–µ—Ä–µ\n\n"
        f"–ò–º—è: {user.user_first_name}\n"
        f"–Æ–∑–µ—Ä: {'@' + user.username if user.username else '–ù–µ—Ç —é–∑–µ—Ä–Ω–µ–π–º–∞'}\n"
        f"user_id: {user.user_id}\n"
        f"–ë–∞–ª–∞–Ω—Å: {user.balance} USDT\n"
        f"–°—Ç–∞—Ç—É—Å: {'Admin' if user.is_admin else 'User'}\n"
        f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user.created}"
    )
    return text


user_help_start_mess = (
    f"<b>üì¨ –°–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–æ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!</b>\n\n"
    f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–º–æ–∂–µ—Ç —É–≤–∏–¥–µ—Ç—å –≤—Å—é –≤–∞—à—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, –≤–∫–ª—é—á–∞—è –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥, –±–∞–ª–∞–Ω—Å –∏ —Ç–¥.\n"
    f"–ü–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É."
)

async def admin_answer_help_text(user_help: HelpMessage):
    return (
        f"üìÑ –ü—Ä–µ–¥—ã–¥—É—â–∏–π –æ—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n"
        f"{user_help.answer}"
    )


async def user_help_added_text(text, user_id):
    return (
    f"<b>‚è≥ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å!</b>\n"
    f"<b>–û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.</b>\n\n"
    f"<b>–í–æ–ø—Ä–æ—Å:</b> {text}\n\n"
    f"<b>User id:</b> {user_id}"
)

async def already_has_help_message_text(help: HelpMessage):
    return (
        f"üö´<b> –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É</b>\n"
        f"<b>–î–æ–∂–¥–∏—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∞ –ø—Ä–µ–∂–¥–µ —á–µ–º —Å–Ω–æ–≤–∞ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å.</b>\n\n"
        f"<b>–í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ:</b> {help.text}\n\n"
        f"<b>User id:</b> {help.user_id}"
    )


async def help_messages_text(messages: list[tuple[HelpMessage, User]], slide: int = 0):
    text = (
        f"üÜò <b>–û–±—Ä–∞—â–µ–Ω–∏—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É</b>\n\n"
    )

    for mess_tuple in messages:
        mess, user = mess_tuple
        try:
            text += (
                f"üî∞ –ó–∞—è–≤–∫–∞ ‚Ññ{mess.id}\n"
                f"üë• –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {'@' + user.username if user.username else '–ù–µ—Ç —é–∑–µ—Ä–Ω–µ–π–º–∞'} | {mess.user_id}\n"
                f"–¢–µ–∫—Å—Ç: {truncate_text(mess.text)}\n"
                f"–û—Ç–≤–µ—Ç–∏—Ç—å - /help_answer_{mess.id}\n\n"
            )
        except IndexError:
            text += f"\n‚ùå –ö–æ–Ω–µ—Ü —Å–æ–æ–±—â–µ–Ω–∏–π"
            break

    return text

async def help_text(help_message: list[tuple[HelpMessage, User]]):
    mess, user = help_message[0]

    return (
        f"üî∞ –û–±—Ä–∞—â–µ–Ω–∏–µ ‚Ññ{mess.id}\n\n"
        f"üë• –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {'@' + user.username if user.username else '–ù–µ—Ç —é–∑–µ—Ä–Ω–µ–π–º–∞'} | {mess.user_id}\n\n"
        f"–¢–µ–∫—Å—Ç: {mess.text}\n\n"
        f"–°—Ç–∞—Ç—É—Å: {'‚è≥ –û–∂–∏–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç' if not mess.answer else '‚úÖ –†–µ—à–µ–Ω'}\n"
        f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {mess.created}"
    )

admin_wait_help_text =(
    f"–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n\n"
    f"–ê —Ç–∞–∫–∂–µ –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –±—É–¥–µ—Ç –∑–∞–∫—Ä—ã—Ç–æ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–º–æ–∂–µ—Ç –Ω–∞–ø–∏—Å–∞—Ç—å —Å–Ω–æ–≤–∞!"
)

async def help_text_confirm(help_mess: list[tuple[HelpMessage, User]], admin_text):
    mess, user = help_mess[0]
    return (
        f"üì® –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {'@' + user.username if user.username else '–ù–µ—Ç —é–∑–µ—Ä–Ω–µ–π–º–∞'} | {mess.user_id}\n\n"
        f"–°–æ–æ–±—â–µ–Ω–∏–µ: {admin_text}\n\n"
        f"–û–±—Ä–∞—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã—Ç–æ!"
    )

help_answered_text = (
    f"<b>–û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω –¥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!\n"
    f"–ó–∞—è–≤–∫–∞ —Å—á–∏—Ç–∞–µ—Ç—Å—è –∑–∞–∫—Ä—ã—Ç–æ–π</b>"
)